using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

namespace Underconnected
{
    /// <summary>
    /// Represents a demand that players have to deliver in order to get a score reward and pass a level.
    /// </summary>
    [System.Serializable]
    public class Demand
    {
        /// <summary>
        /// The ID of this matter.
        /// Used to identify each demand so the server can remove specific demands on clients.
        /// </summary>
        public int ID { get; private set; }
        /// <summary>
        /// Stores the demanded matter.
        /// </summary>
        public Matter Matter { get; private set; }
        /// <summary>
        /// The time left for this demand in seconds.
        /// </summary>
        public float TimeLeft { get; private set; }
        /// <summary>
        /// The time limit for this demand in seconds. `0` if infinite.
        /// </summary>
        public float TimeLimit { get; private set; }
        /// <summary>
        /// Tells whether this demand has a time limit.
        /// </summary>
        public bool HasTimeLimit => this.TimeLimit > 0.0F;
        /// <summary>
        /// Tells whether this demand has already expired.
        /// </summary>
        public bool HasExpired => this.HasTimeLimit && this.TimeLeft <= 0.0F;
        /// <summary>
        /// Tells whether this demand has already been delivered.
        /// </summary>
        public bool IsDelivered { get; private set; }


        /// <summary>
        /// Called when this demand has been delivered.
        /// Parameters: The demand that has triggered this event.
        /// </summary>
        public event UnityAction<Demand> OnDelivered;
        /// <summary>
        /// Called when the time limit for this demand has been reached.
        /// Parameters: The demand that has triggered this event.
        /// </summary>
        public event UnityAction<Demand> OnExpired;


        /// <summary>
        /// Creates a new demand with the given matter and time limit.
        /// </summary>
        /// <param name="id">The ID for this demand. Usually generated by the server's demand queue and then sent to the client.</param>
        /// <param name="matter">The matter for this demand.</param>
        /// <param name="timeLimit">The time limit for this demand in seconds. `0` for infinite.</param>
        public Demand(int id, Matter matter, float timeLimit = 0)
        {
            this.ID = id;
            this.Matter = matter;
            this.TimeLimit = timeLimit;
            this.TimeLeft = timeLimit;
            this.IsDelivered = false;
        }


        /// <summary>
        /// Updates this demand.
        /// Decreases this demand's time and checks if it has expired.
        /// </summary>
        /// <param name="deltaTime">The time that has passed since the last Update call (in seconds).</param>
        public void Update(float deltaTime)
        {
            if (!this.IsDelivered && this.HasTimeLimit && !this.HasExpired)
            {
                this.TimeLeft = Mathf.Max(this.TimeLeft - deltaTime, 0.0F);
                if (this.TimeLeft <= 0.0F)
                    this.OnExpired?.Invoke(this);
            }
        }

        /// <summary>
        /// Marks this demand as delivered and triggers its <see cref="OnDelivered"/> event.
        /// </summary>
        public void SetDelivered()
        {
            if (!this.IsDelivered)
            {
                this.IsDelivered = true;
                this.OnDelivered?.Invoke(this);
            }
        }
    }
}
